import os
import logging
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message
from datetime import datetime
from dotenv import load_dotenv

from models.database import get_db
from models.models import User, Game, UserWishlist
from providers.deku_deals_provider import DekuDealsProvider
from .scheduler import price_checker

# Load environment variables
load_dotenv()
BOT_TOKEN = os.getenv('BOT_TOKEN')

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Initialize bot and dispatcher
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# Initialize price provider
price_provider = DekuDealsProvider()

# Temporary storage for search results (in production, use Redis or database)
search_results = {}
user_states = {}

@dp.message(Command("start"))
async def cmd_start(message: Message):
    """Handle /start command"""
    user_id = message.from_user.id
    username = message.from_user.username

    # Create or get user
    db = next(get_db())
    user = db.query(User).filter(User.telegram_id == user_id).first()
    if not user:
        user = User(telegram_id=user_id, telegram_username=username)
        db.add(user)
        db.commit()
        db.refresh(user)

    welcome_text = (
        "üéÆ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Nintendo Deals Bot!</b>\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–∫–∏–¥–∫–∏ –Ω–∞ –∏–≥—Ä—ã Nintendo Switch.\n\n"
        "üìã <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/add <–Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã> - –¥–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä—É –≤ –≤–∏—à-–ª–∏—Å—Ç\n"
        "/list - –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à –≤–∏—à-–ª–∏—Å—Ç\n"
        "/remove <–Ω–æ–º–µ—Ä> - —É–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É –∏–∑ –≤–∏—à-–ª–∏—Å—Ç–∞\n"
        "/setthreshold <—Ü–µ–Ω–∞> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ä–æ–≥ —Ü–µ–Ω—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
        "/region <—Ä–µ–≥–∏–æ–Ω> - –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏–æ–Ω (us, eu, jp)\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "üíé <b>–ü—Ä–µ–º–∏—É–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
        "/subscribe - –æ—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É\n"
        "/donate - –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç\n\n"
        f"–í–∞—à ID: {user_id}"
    )

    await message.reply(welcome_text)

@dp.message(Command("help"))
async def cmd_help(message: Message):
    """Handle /help command"""
    help_text = (
        "üéÆ <b>Nintendo Deals Bot - –°–ø—Ä–∞–≤–∫–∞</b>\n\n"
        "üìã <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/add <–Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã> - –¥–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä—É –≤ –≤–∏—à-–ª–∏—Å—Ç\n"
        "/list - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∏–≥—Ä\n"
        "/remove <–Ω–æ–º–µ—Ä> - —É–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É –∏–∑ –≤–∏—à-–ª–∏—Å—Ç–∞\n"
        "/setthreshold <—Ü–µ–Ω–∞> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∂–µ–ª–∞–µ–º—É—é —Ü–µ–Ω—É\n"
        "/region <—Ä–µ–≥–∏–æ–Ω> - –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏–æ–Ω (us/eu/jp)\n"
        "/subscribe - –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ (–¥–æ 100 –∏–≥—Ä)\n"
        "/donate - –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É\n\n"
        "üí° <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>\n"
        "1. –î–æ–±–∞–≤—å—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /add\n"
        "2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Ü–µ–Ω—É /setthreshold\n"
        "3. –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∫–∏–¥–∫–∞—Ö!\n\n"
        "üîó –ë–µ—Å–ø–ª–∞—Ç–Ω–æ: –¥–æ 10 –∏–≥—Ä –≤ –≤–∏—à-–ª–∏—Å—Ç–µ"
    )

    await message.reply(help_text)

@dp.message(Command("region"))
async def cmd_region(message: Message):
    """Handle /region command"""
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    user_id = message.from_user.id

    if not args:
        await message.reply("–£–∫–∞–∂–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω: /region us|eu|jp")
        return

    region = args[0].lower()
    if region not in ['us', 'eu', 'jp']:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–≥–∏–æ–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ: us, eu, jp")
        return

    db = next(get_db())
    user = db.query(User).filter(User.telegram_id == user_id).first()
    if user:
        user.region = region
        db.commit()
        await message.reply(f"‚úÖ –†–µ–≥–∏–æ–Ω –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {region.upper()}")
    else:
        await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

@dp.message(Command("subscribe"))
async def cmd_subscribe(message: Message):
    """Handle /subscribe command"""
    user_id = message.from_user.id

    db = next(get_db())
    user = db.query(User).filter(User.telegram_id == user_id).first()

    if user and user.is_premium:
        await message.reply("‚úÖ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞!")
        return

    # In MVP, we'll just set premium for demo purposes
    # In production, this would integrate with payment system
    if user:
        user.is_premium = True
        db.commit()
        await message.reply(
            "üéâ <b>–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–æ 100 –∏–≥—Ä!\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É! üíé"
        )
    else:
        await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

@dp.message(Command("donate"))
async def cmd_donate(message: Message):
    """Handle /donate command"""
    donate_text = (
        "üíù <b>–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç</b>\n\n"
        "–í–∞—à –≤–∫–ª–∞–¥ –ø–æ–º–æ–≥–∞–µ—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å –±–æ—Ç–∞!\n\n"
        "üí≥ <b>–°–ø–æ—Å–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n"
        "‚Ä¢ Telegram Stars: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–≤–µ–∑–¥—ã –±–æ—Ç—É\n"
        "‚Ä¢ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞: —Å–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º\n"
        "‚Ä¢ PayPal: —Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –ø–æ–∑–∂–µ\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É! üôè"
    )

    await message.reply(donate_text)

@dp.message(Command("add"))
async def cmd_add(message: Message):
    """Handle /add command - add game to wishlist"""
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    user_id = message.from_user.id

    if not args:
        await message.reply("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã: /add <–Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã>")
        return

    query = " ".join(args)
    db = next(get_db())

    # Get user
    user = db.query(User).filter(User.telegram_id == user_id).first()
    if not user:
        await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return

    # Check wishlist limit
    wishlist_count = db.query(UserWishlist).filter(UserWishlist.user_id == user.id).count()
    max_games = 100 if user.is_premium else 10

    if wishlist_count >= max_games:
        await message.reply(
            f"‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∏–≥—Ä –≤ –≤–∏—à-–ª–∏—Å—Ç–µ ({max_games}).\n"
            "–û—Ñ–æ—Ä–º–∏—Ç–µ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥–æ–π /subscribe –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –¥–æ 100 –∏–≥—Ä."
        )
        return

    # Search for games
    await message.reply("üîç –ò—â—É –∏–≥—Ä—ã...")
    games = price_provider.search_games(query, user.region)

    if not games:
        await message.reply("‚ùå –ò–≥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        return

    # Show search results
    response = "üéÆ <b>–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã:</b>\n\n"
    for i, game in enumerate(games[:5], 1):  # Show top 5 results
        price_text = f"${game['current_price']}" if game['current_price'] else "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        discount_text = f" (-{game['discount_percent']}%)" if game['discount_percent'] else ""
        response += f"{i}. {game['title']}\n   üí∞ {price_text}{discount_text}\n\n"

    response += "üìù <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–≥—Ä—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:</b>\n"
    response += "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–æ–º–µ—Ä–æ–º (1-5) –∏–ª–∏ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã."

    # Store search results and user state
    search_results[user_id] = games[:5]
    user_states[user_id] = {'action': 'select_game'}
    await message.reply(response)

@dp.message(Command("list"))
async def cmd_list(message: Message):
    """Handle /list command - show user's wishlist"""
    user_id = message.from_user.id
    db = next(get_db())

    user = db.query(User).filter(User.telegram_id == user_id).first()
    if not user:
        await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return

    # Get user's wishlist with game info
    wishlist_items = (
        db.query(UserWishlist, Game)
        .join(Game, UserWishlist.game_id == Game.id)
        .filter(UserWishlist.user_id == user.id)
        .all()
    )

    if not wishlist_items:
        await message.reply("üìù –í–∞—à –≤–∏—à-–ª–∏—Å—Ç –ø—É—Å—Ç.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add <–Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã> –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä.")
        return

    response = "üìã <b>–í–∞—à –≤–∏—à-–ª–∏—Å—Ç:</b>\n\n"
    for i, (wishlist_item, game) in enumerate(wishlist_items, 1):
        price_text = f"${game.last_price_cents/100:.2f}" if game.last_price_cents else "–¶–µ–Ω–∞ –Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞"
        threshold_text = f" (–∂–µ–ª–∞–µ–º–∞—è: ${wishlist_item.desired_price_cents/100:.2f})" if wishlist_item.desired_price_cents else ""
        response += f"{i}. {game.title}\n   üí∞ {price_text}{threshold_text}\n\n"

    response += "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /remove <–Ω–æ–º–µ—Ä> –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–≥—Ä—ã"
    await message.reply(response)

@dp.message(Command("remove"))
async def cmd_remove(message: Message):
    """Handle /remove command - remove game from wishlist"""
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    user_id = message.from_user.id

    if not args:
        await message.reply("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–≥—Ä—ã: /remove <–Ω–æ–º–µ—Ä>")
        return

    try:
        game_number = int(args[0]) - 1  # Convert to 0-based index
    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ.")
        return

    db = next(get_db())
    user = db.query(User).filter(User.telegram_id == user_id).first()
    if not user:
        await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return

    # Get user's wishlist
    wishlist_items = (
        db.query(UserWishlist)
        .filter(UserWishlist.user_id == user.id)
        .all()
    )

    if game_number < 0 or game_number >= len(wishlist_items):
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∏–≥—Ä—ã.")
        return

    # Remove the game
    item_to_remove = wishlist_items[game_number]
    db.delete(item_to_remove)
    db.commit()

    await message.reply("‚úÖ –ò–≥—Ä–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –≤–∏—à-–ª–∏—Å—Ç–∞!")

@dp.message(Command("setthreshold"))
async def cmd_setthreshold(message: Message):
    """Handle /setthreshold command - set price threshold for notifications"""
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    user_id = message.from_user.id

    if not args:
        await message.reply("–£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Ü–µ–Ω—É: /setthreshold <—Ü–µ–Ω–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö>")
        return

    try:
        price = float(args[0])
        if price <= 0:
            raise ValueError
    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞. –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    db = next(get_db())
    user = db.query(User).filter(User.telegram_id == user_id).first()
    if not user:
        await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return

    # Get user's wishlist
    wishlist_items = (
        db.query(UserWishlist, Game)
        .join(Game, UserWishlist.game_id == Game.id)
        .filter(UserWishlist.user_id == user.id)
        .all()
    )

    if not wishlist_items:
        await message.reply("üìù –í–∞—à –≤–∏—à-–ª–∏—Å—Ç –ø—É—Å—Ç.\n\n–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∏–≥—Ä—ã –∫–æ–º–∞–Ω–¥–æ–π /add")
        return

    # Show games to choose from
    response = "üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ä–æ–≥–∞ —Ü–µ–Ω—ã:</b>\n\n"
    for i, (wishlist_item, game) in enumerate(wishlist_items, 1):
        current_price = f"${game.last_price_cents/100:.2f}" if game.last_price_cents else "–Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞"
        response += f"{i}. {game.title} (—Ç–µ–∫—É—â–∞—è: {current_price})\n"

    response += f"\nüí∞ –ñ–µ–ª–∞–µ–º–∞—è —Ü–µ–Ω–∞: ${price:.2f}\n"
    response += "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–æ–º–µ—Ä–æ–º –∏–≥—Ä—ã –∏–ª–∏ '–æ—Ç–º–µ–Ω–∞'."

    # Store user state
    user_states[user_id] = {'action': 'set_threshold', 'price': price}
    await message.reply(response)

@dp.message()
async def handle_text_messages(message: Message):
    """Handle text messages for game selection and other interactions"""
    user_id = message.from_user.id
    text = message.text.strip().lower()

    db = next(get_db())
    user = db.query(User).filter(User.telegram_id == user_id).first()
    if not user:
        return

    # Handle game selection from search results
    if user_id in user_states and user_states[user_id].get('action') == 'select_game':
        if text == '–æ—Ç–º–µ–Ω–∞':
            del user_states[user_id]
            await message.reply("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            return

        try:
            choice = int(text)
            if choice < 1 or choice > 5:
                raise ValueError
        except ValueError:
            await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5 –∏–ª–∏ '–æ—Ç–º–µ–Ω–∞'.")
            return

        # Get search results
        if user_id not in search_results:
            await message.reply("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.")
            return

        games = search_results[user_id]
        if choice > len(games):
            await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∏–≥—Ä—ã.")
            return

        selected_game = games[choice - 1]

        # Check if game already in wishlist
        existing_game = db.query(Game).filter(Game.source_id == selected_game['id']).first()
        if existing_game:
            # Check if already in user's wishlist
            existing_wishlist = db.query(UserWishlist).filter(
                UserWishlist.user_id == user.id,
                UserWishlist.game_id == existing_game.id
            ).first()
            if existing_wishlist:
                await message.reply("‚ùå –≠—Ç–∞ –∏–≥—Ä–∞ —É–∂–µ –≤ –≤–∞—à–µ–º –≤–∏—à-–ª–∏—Å—Ç–µ!")
                del user_states[user_id]
                del search_results[user_id]
                return
            game = existing_game
        else:
            # Create new game entry
            game = Game(
                source_id=selected_game['id'],
                title=selected_game['title'],
                platform=selected_game['platform'],
                last_price_cents=int(selected_game['current_price'] * 100) if selected_game['current_price'] else None,
                currency='USD'
            )
            db.add(game)
            db.commit()
            db.refresh(game)

        # Add to wishlist
        wishlist_item = UserWishlist(
            user_id=user.id,
            game_id=game.id
        )
        db.add(wishlist_item)
        db.commit()

        # Clean up
        del user_states[user_id]
        del search_results[user_id]

        await message.reply(
            f"‚úÖ <b>{selected_game['title']}</b> –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à –≤–∏—à-–ª–∏—Å—Ç!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setthreshold –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∂–µ–ª–∞–µ–º–æ–π —Ü–µ–Ω—ã."
        )
        return

    # Handle threshold setting
    elif user_id in user_states and user_states[user_id].get('action') == 'set_threshold':
        if text == '–æ—Ç–º–µ–Ω–∞':
            del user_states[user_id]
            await message.reply("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ä–æ–≥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            return

        try:
            choice = int(text)
            if choice < 1:
                raise ValueError
        except ValueError:
            await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–≥—Ä—ã –∏–ª–∏ '–æ—Ç–º–µ–Ω–∞'.")
            return

        # Get wishlist items
        wishlist_items = (
            db.query(UserWishlist, Game)
            .join(Game, UserWishlist.game_id == Game.id)
            .filter(UserWishlist.user_id == user.id)
            .all()
        )

        if choice > len(wishlist_items):
            await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∏–≥—Ä—ã.")
            return

        wishlist_item, game = wishlist_items[choice - 1]
        threshold_price = user_states[user_id]['price']

        # Update threshold
        wishlist_item.desired_price_cents = int(threshold_price * 100)
        db.commit()

        del user_states[user_id]

        await message.reply(
            f"‚úÖ –ü–æ—Ä–æ–≥ —Ü–µ–Ω—ã –¥–ª—è <b>{game.title}</b> —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${threshold_price:.2f}\n\n"
            "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –æ–ø—É—Å—Ç–∏—Ç—Å—è –Ω–∏–∂–µ —ç—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è!"
        )
        return

async def main():
    """Main function to start the bot"""
    logger.info("Starting Nintendo Deals Bot...")

    # Create database tables
    from models.database import engine
    from models.models import Base
    Base.metadata.create_all(bind=engine)

    # Start polling
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
